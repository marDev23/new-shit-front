{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ = require(\"lodash\");\n\nvar React = require(\"react\");\n\nvar YearView_1 = require(\"../views/YearView\");\n\nvar BasePicker_1 = require(\"./BasePicker\");\n\nvar PAGE_WIDTH = 3;\nvar PAGE_HEIGHT = 4;\nvar YEARS_ON_PAGE = PAGE_WIDTH * PAGE_HEIGHT;\n\nvar YearPicker =\n/** @class */\nfunction (_super) {\n  __extends(YearPicker, _super);\n  /*\r\n    Note:\r\n      use it like this <YearPicker key={someInputValue} />\r\n      to make react create new instance when input value changes\r\n  */\n\n\n  function YearPicker(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.handleChange = function (e, _a) {\n      var value = _a.value;\n\n      var data = __assign({}, _this.props, {\n        value: {\n          year: parseInt(value, 10)\n        }\n      });\n\n      _this.props.onChange(e, data);\n    };\n\n    _this.switchToNextPage = function (e, data, callback) {\n      _this.setState(function (_a) {\n        var date = _a.date;\n        var nextDate = date.clone();\n        nextDate.add(YEARS_ON_PAGE, 'year');\n        return {\n          date: nextDate\n        };\n      }, callback);\n    };\n\n    _this.switchToPrevPage = function (e, data, callback) {\n      _this.setState(function (_a) {\n        var date = _a.date;\n        var prevDate = date.clone();\n        prevDate.subtract(YEARS_ON_PAGE, 'year');\n        return {\n          date: prevDate\n        };\n      }, callback);\n    };\n\n    _this.PAGE_WIDTH = PAGE_WIDTH;\n    return _this;\n  }\n\n  YearPicker.prototype.render = function () {\n    var _a = this.props,\n        onChange = _a.onChange,\n        value = _a.value,\n        initializeWith = _a.initializeWith,\n        closePopup = _a.closePopup,\n        inline = _a.inline,\n        isPickerInFocus = _a.isPickerInFocus,\n        isTriggerInFocus = _a.isTriggerInFocus,\n        onCalendarViewMount = _a.onCalendarViewMount,\n        disable = _a.disable,\n        enable = _a.enable,\n        minDate = _a.minDate,\n        maxDate = _a.maxDate,\n        rest = __rest(_a, [\"onChange\", \"value\", \"initializeWith\", \"closePopup\", \"inline\", \"isPickerInFocus\", \"isTriggerInFocus\", \"onCalendarViewMount\", \"disable\", \"enable\", \"minDate\", \"maxDate\"]);\n\n    return React.createElement(YearView_1.default, __assign({}, rest, {\n      values: this.buildCalendarValues(),\n      onNextPageBtnClick: this.switchToNextPage,\n      onPrevPageBtnClick: this.switchToPrevPage,\n      onValueClick: this.handleChange,\n      onBlur: this.handleBlur,\n      inline: this.props.inline,\n      onMount: this.props.onCalendarViewMount,\n      hoveredItemIndex: this.state.hoveredCellPosition,\n      onCellHover: this.onHoveredCellPositionChange,\n      hasPrevPage: this.isPrevPageAvailable(),\n      hasNextPage: this.isNextPageAvailable(),\n      disabledItemIndexes: this.getDisabledPositions(),\n      activeItemIndex: this.getActiveCellPosition()\n    }));\n  };\n\n  YearPicker.prototype.buildCalendarValues = function () {\n    /*\r\n      Return array of years (strings) like ['2012', '2013', ...]\r\n      that used to populate calendar's page.\r\n    */\n    var years = [];\n    var date = this.state.date;\n    var padd = date.year() % YEARS_ON_PAGE;\n    var first = date.year() - padd;\n\n    for (var i = 0; i < YEARS_ON_PAGE; i++) {\n      years[i] = (first + i).toString();\n    }\n\n    return years;\n  };\n\n  YearPicker.prototype.getInitialDatePosition = function () {\n    var selectable = this.getSelectableCellPositions();\n    var values = this.buildCalendarValues();\n    var currentYearIndex = values.indexOf(this.state.date.year().toString());\n\n    if (selectable.indexOf(currentYearIndex) < 0) {\n      return selectable[0];\n    }\n\n    return currentYearIndex;\n  };\n\n  YearPicker.prototype.getActiveCellPosition = function () {\n    /*\r\n      Return position of a year that should be displayed as active\r\n      (position in array returned by `this.buildCalendarValues`).\r\n    */\n    if (!_.isNil(this.props.value)) {\n      var years = this.buildCalendarValues();\n      var yearIndex = years.indexOf(this.props.value.year().toString());\n\n      if (yearIndex >= 0) {\n        return yearIndex;\n      }\n    }\n  };\n\n  YearPicker.prototype.getSelectableCellPositions = function () {\n    var _this = this;\n\n    return _.filter(_.range(0, YEARS_ON_PAGE), function (y) {\n      return !_.includes(_this.getDisabledPositions(), y);\n    });\n  };\n\n  YearPicker.prototype.getDisabledPositions = function () {\n    /*\r\n      Return position numbers of years that should be displayed as disabled\r\n      (position in array returned by `this.buildCalendarValues`).\r\n    */\n    var disabled = [];\n    var years = this.buildCalendarValues();\n\n    if (_.isArray(this.props.enable)) {\n      var enabledYears_1 = this.props.enable.map(function (yearMoment) {\n        return yearMoment.year().toString();\n      });\n      disabled = _.concat(disabled, years.filter(function (year) {\n        return !_.includes(enabledYears_1, year);\n      }).map(function (year) {\n        return years.indexOf(year);\n      }));\n    }\n\n    if (_.isArray(this.props.disable)) {\n      disabled = _.concat(disabled, this.props.disable.filter(function (yearMoment) {\n        return _.includes(years, yearMoment.year().toString());\n      }).map(function (yearMoment) {\n        return years.indexOf(yearMoment.year().toString());\n      }));\n    }\n\n    if (!_.isNil(this.props.maxDate)) {\n      if (parseInt(_.first(years), 10) > this.props.maxDate.year()) {\n        disabled = _.range(0, years.length);\n      } else if (_.includes(years, this.props.maxDate.year().toString())) {\n        disabled = _.concat(disabled, _.range(years.indexOf(this.props.maxDate.year().toString()) + 1, years.length));\n      }\n    }\n\n    if (!_.isNil(this.props.minDate)) {\n      if (parseInt(_.last(years), 10) < this.props.minDate.year()) {\n        disabled = _.range(0, years.length);\n      } else if (_.includes(years, this.props.minDate.year().toString())) {\n        disabled = _.concat(disabled, _.range(0, years.indexOf(this.props.minDate.year().toString())));\n      }\n    }\n\n    if (disabled.length > 0) {\n      return _.uniq(disabled);\n    }\n  };\n\n  YearPicker.prototype.isNextPageAvailable = function () {\n    var _a = this.props,\n        maxDate = _a.maxDate,\n        enable = _a.enable;\n    var lastOnPage = parseInt(_.last(this.buildCalendarValues()), 10);\n\n    if (_.isArray(enable)) {\n      return _.some(enable, function (enabledYear) {\n        return enabledYear.year() > lastOnPage;\n      });\n    }\n\n    if (_.isNil(maxDate)) {\n      return true;\n    }\n\n    return lastOnPage < maxDate.year();\n  };\n\n  YearPicker.prototype.isPrevPageAvailable = function () {\n    var _a = this.props,\n        minDate = _a.minDate,\n        enable = _a.enable;\n    var firstOnPage = parseInt(_.first(this.buildCalendarValues()), 10);\n\n    if (_.isArray(enable)) {\n      return _.some(enable, function (enabledYear) {\n        return enabledYear.year() < firstOnPage;\n      });\n    }\n\n    if (_.isNil(minDate)) {\n      return true;\n    }\n\n    return firstOnPage > minDate.year();\n  };\n\n  return YearPicker;\n}(BasePicker_1.SingleSelectionPicker);\n\nexports.default = YearPicker;","map":null,"metadata":{},"sourceType":"script"}