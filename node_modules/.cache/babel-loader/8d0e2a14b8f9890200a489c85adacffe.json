{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ = require(\"lodash\");\n\nvar moment = require(\"moment\");\n\nexports.TIME_FORMAT = {\n  24: 'HH:mm',\n  AMPM: 'hh:mm A',\n  ampm: 'hh:mm a'\n};\n/** Parse string, moment, Date.\r\n *\r\n * Return unedfined on invalid input.\r\n */\n\nfunction parseValue(value, dateFormat) {\n  if (!_.isNil(value) && !_.isNil(dateFormat)) {\n    var date = moment(value, dateFormat);\n\n    if (date.isValid()) {\n      return date;\n    }\n  }\n}\n\nexports.parseValue = parseValue;\n/** Parse string, moment, Date, string[], moment[], Date[].\r\n *\r\n * Return array of moments. Returned value contains only valid moments.\r\n * Return undefined if none of the input values are valid.\r\n */\n\nfunction parseArrayOrValue(data, dateFormat) {\n  if (_.isArray(data)) {\n    var parsed = _.compact(data.map(function (item) {\n      return parseValue(item, dateFormat);\n    }));\n\n    if (parsed.length > 0) {\n      return parsed;\n    }\n  }\n\n  var parsedValue = parseValue(data, dateFormat);\n  return parsedValue && [parsedValue];\n}\n\nexports.parseArrayOrValue = parseArrayOrValue;\n/** Create moment.\r\n *\r\n * Creates moment using `dateParams` or `initialDate` arguments (if provided).\r\n * Precedense order: dateParams -> initialDate -> default value\r\n */\n\nfunction getInitializer(context) {\n  var dateParams = context.dateParams,\n      initialDate = context.initialDate,\n      dateFormat = context.dateFormat;\n\n  if (dateParams) {\n    var parsedParams = moment(dateParams);\n\n    if (parsedParams.isValid()) {\n      return parsedParams;\n    }\n  }\n\n  var parsedInitialDate = parseValue(initialDate, dateFormat);\n\n  if (parsedInitialDate) {\n    return parsedInitialDate;\n  }\n\n  return moment();\n}\n\nexports.getInitializer = getInitializer;\n/** Return initial date if `value` is empty and if `initialDate` provided. */\n\nfunction chooseValue(value, initialDate) {\n  if (value === '' && initialDate) {\n    return initialDate;\n  }\n\n  return value;\n}\n\nexports.chooseValue = chooseValue;\n\nfunction dateValueToString(value, dateFormat) {\n  if (_.isString(value)) {\n    return value;\n  }\n\n  if (moment.isMoment(value)) {\n    return value.format(dateFormat);\n  }\n\n  return moment(value, dateFormat).format(dateFormat);\n}\n\nexports.dateValueToString = dateValueToString;","map":null,"metadata":{},"sourceType":"script"}