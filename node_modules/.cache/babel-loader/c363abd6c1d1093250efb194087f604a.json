{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ = require(\"lodash\");\n\nvar moment = require(\"moment\");\n\nvar PropTypes = require(\"prop-types\");\n\nvar React = require(\"react\");\n\nvar lib_1 = require(\"../lib\");\n\nvar HourPicker_1 = require(\"../pickers/timePicker/HourPicker\");\n\nvar MinutePicker_1 = require(\"../pickers/timePicker/MinutePicker\");\n\nvar InputView_1 = require(\"../views/InputView\");\n\nvar BaseInput_1 = require(\"./BaseInput\");\n\nvar parse_1 = require(\"./parse\");\n\nfunction getNextMode(currentMode) {\n  if (currentMode === 'hour') {\n    return 'minute';\n  }\n\n  return 'hour';\n}\n\nvar TimeInput =\n/** @class */\nfunction (_super) {\n  __extends(TimeInput, _super);\n\n  function TimeInput(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.handleSelect = function (e, _a) {\n      var value = _a.value;\n      lib_1.tick(_this.handleSelectUndelayed, e, {\n        value: value\n      });\n    };\n\n    _this.handleSelectUndelayed = function (e, _a) {\n      var value = _a.value;\n      var hour = value.hour,\n          minute = value.minute;\n      var _b = _this.props,\n          timeFormat = _b.timeFormat,\n          disableMinute = _b.disableMinute;\n      var outputTimeString = '';\n\n      if (_this.state.mode === 'hour' && !_.isNil(hour)) {\n        outputTimeString = moment({\n          hour: hour\n        }).format(parse_1.TIME_FORMAT[timeFormat]);\n      } else if (!_.isNil(hour) && !_.isNil(minute)) {\n        outputTimeString = moment({\n          hour: hour,\n          minute: minute\n        }).format(parse_1.TIME_FORMAT[timeFormat]);\n      }\n\n      _.invoke(_this.props, 'onChange', e, __assign({}, _this.props, {\n        value: outputTimeString\n      }));\n\n      if (_this.props.closable && _this.state.mode === 'minute') {\n        _this.closePopup();\n      }\n\n      if (!disableMinute) {\n        _this.switchToNextMode();\n      }\n    };\n\n    _this.switchToNextMode = function () {\n      _this.setState(function (_a) {\n        var mode = _a.mode;\n        return {\n          mode: getNextMode(mode)\n        };\n      }, _this.onModeSwitch);\n    };\n\n    _this.state = {\n      mode: 'hour',\n      popupIsClosed: true\n    };\n    return _this;\n  }\n\n  TimeInput.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        value = _a.value,\n        timeFormat = _a.timeFormat,\n        closable = _a.closable,\n        disableMinute = _a.disableMinute,\n        rest = __rest(_a, [\"value\", \"timeFormat\", \"closable\", \"disableMinute\"]);\n\n    return React.createElement(InputView_1.default, __assign({\n      popupIsClosed: this.state.popupIsClosed,\n      onMount: this.onInputViewMount,\n      closePopup: this.closePopup,\n      openPopup: this.openPopup\n    }, rest, {\n      value: value,\n      render: function render(pickerProps) {\n        return _this.getPicker(pickerProps);\n      }\n    }));\n  };\n\n  TimeInput.prototype.getPicker = function (_a) {\n    var tabIndex = _a.tabIndex,\n        pickerWidth = _a.pickerWidth,\n        pickerStyle = _a.pickerStyle;\n    var _b = this.props,\n        value = _b.value,\n        timeFormat = _b.timeFormat,\n        inline = _b.inline;\n    var currentValue = parse_1.parseValue(value, parse_1.TIME_FORMAT[timeFormat]);\n    var pickerProps = {\n      inline: inline,\n      onCalendarViewMount: this.onCalendarViewMount,\n      isPickerInFocus: this.isPickerInFocus,\n      isTriggerInFocus: this.isTriggerInFocus,\n      hasHeader: false,\n      pickerWidth: pickerWidth,\n      pickerStyle: pickerStyle,\n      onHeaderClick: function onHeaderClick() {\n        return undefined;\n      },\n      closePopup: this.closePopup,\n      initializeWith: parse_1.getInitializer({\n        initialDate: currentValue,\n        dateFormat: parse_1.TIME_FORMAT[timeFormat]\n      }),\n      value: currentValue,\n      onChange: this.handleSelect,\n      timeFormat: timeFormat,\n      tabIndex: tabIndex\n    };\n\n    if (this.state.mode === 'hour') {\n      return React.createElement(HourPicker_1.default, __assign({}, pickerProps));\n    }\n\n    return React.createElement(MinutePicker_1.default, __assign({}, pickerProps));\n  };\n  /**\r\n   * Component responsibility:\r\n   *  - parse time input string\r\n   *  - switch between modes ['hour', 'minute']\r\n   *  - handle HourPicker/MinutePicker change (format { hour: number, minute: number } into output time string)\r\n   */\n\n\n  TimeInput.defaultProps = {\n    icon: 'time',\n    timeFormat: '24',\n    disableMinute: false,\n    inline: false\n  };\n  TimeInput.propTypes = {\n    /** Currently selected value. */\n    value: PropTypes.string,\n\n    /** One of [\"24\", \"AMPM\", \"ampm\"] */\n    timeFormat: PropTypes.oneOf(['24', 'AMPM', 'ampm']),\n\n    /** If true, popup closes after selecting a date-time. */\n    closable: PropTypes.bool,\n\n    /** If true, minutes picker won't be shown after picking the hour. */\n    disableMinute: PropTypes.bool,\n\n    /**\r\n     * Called on clear.\r\n     *\r\n     * @param {SyntheticEvent} event - React's original SyntheticEvent.\r\n     * @param {object} data - All props and proposed value.\r\n     */\n    onClear: PropTypes.func,\n\n    /** Using the clearable setting will let users remove their selection from a calendar. */\n    clearable: PropTypes.bool,\n\n    /** Optional Icon to display inside the clearable Input. */\n    clearIcon: PropTypes.any,\n\n    /** Duration of the CSS transition animation in milliseconds. */\n    duration: PropTypes.number,\n\n    /** Named animation event to used. Must be defined in CSS. */\n    animation: PropTypes.string\n  };\n  return TimeInput;\n}(BaseInput_1.default);\n\nexports.default = TimeInput;","map":null,"metadata":{},"sourceType":"script"}