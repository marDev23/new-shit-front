{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ = require(\"lodash\");\n\nvar moment = require(\"moment\");\n\nvar React = require(\"react\");\n\nvar MonthView_1 = require(\"../views/MonthView\");\n\nvar BasePicker_1 = require(\"./BasePicker\");\n\nvar MONTHS_IN_YEAR = 12;\nvar PAGE_WIDTH = 3;\n\nvar MonthPicker =\n/** @class */\nfunction (_super) {\n  __extends(MonthPicker, _super);\n  /*\r\n    Note:\r\n      use it like this <MonthPicker key={someInputValue} />\r\n      to make react create new instance when input value changes\r\n  */\n\n\n  function MonthPicker(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.handleChange = function (e, _a) {\n      var value = _a.value;\n\n      var data = __assign({}, _this.props, {\n        value: {\n          year: parseInt(_this.getCurrentDate(), 10),\n          month: _this.buildCalendarValues().indexOf(value)\n        }\n      });\n\n      _this.props.onChange(e, data);\n    };\n\n    _this.switchToNextPage = function (e, data, callback) {\n      _this.setState(function (_a) {\n        var date = _a.date;\n        var nextDate = date.clone();\n        nextDate.add(1, 'year');\n        return {\n          date: nextDate\n        };\n      }, callback);\n    };\n\n    _this.switchToPrevPage = function (e, data, callback) {\n      _this.setState(function (_a) {\n        var date = _a.date;\n        var prevDate = date.clone();\n        prevDate.subtract(1, 'year');\n        return {\n          date: prevDate\n        };\n      }, callback);\n    };\n\n    _this.PAGE_WIDTH = PAGE_WIDTH;\n    return _this;\n  }\n\n  MonthPicker.prototype.render = function () {\n    var _a = this.props,\n        onChange = _a.onChange,\n        value = _a.value,\n        initializeWith = _a.initializeWith,\n        closePopup = _a.closePopup,\n        inline = _a.inline,\n        isPickerInFocus = _a.isPickerInFocus,\n        isTriggerInFocus = _a.isTriggerInFocus,\n        onCalendarViewMount = _a.onCalendarViewMount,\n        disable = _a.disable,\n        enable = _a.enable,\n        minDate = _a.minDate,\n        maxDate = _a.maxDate,\n        rest = __rest(_a, [\"onChange\", \"value\", \"initializeWith\", \"closePopup\", \"inline\", \"isPickerInFocus\", \"isTriggerInFocus\", \"onCalendarViewMount\", \"disable\", \"enable\", \"minDate\", \"maxDate\"]);\n\n    return React.createElement(MonthView_1.default, __assign({}, rest, {\n      values: this.buildCalendarValues(),\n      onValueClick: this.handleChange,\n      onCellHover: this.onHoveredCellPositionChange,\n      onNextPageBtnClick: this.switchToNextPage,\n      onPrevPageBtnClick: this.switchToPrevPage,\n      hasPrevPage: this.isPrevPageAvailable(),\n      hasNextPage: this.isNextPageAvailable(),\n      onBlur: this.handleBlur,\n      inline: this.props.inline,\n      onMount: this.props.onCalendarViewMount,\n      disabledItemIndexes: this.getDisabledPositions(),\n      activeItemIndex: this.getActiveCellPosition(),\n      hoveredItemIndex: this.state.hoveredCellPosition,\n      currentHeadingValue: this.getCurrentDate()\n    }));\n  };\n\n  MonthPicker.prototype.getCurrentDate = function () {\n    /* Return current year(string) to display in calendar header. */\n    return this.state.date.year().toString();\n  };\n\n  MonthPicker.prototype.buildCalendarValues = function () {\n    /*\r\n      Return array of months (strings) like ['Aug', 'Sep', ...]\r\n      that used to populate calendar's page.\r\n    */\n    return moment.monthsShort();\n  };\n\n  MonthPicker.prototype.getSelectableCellPositions = function () {\n    var _this = this;\n\n    return _.filter(_.range(0, MONTHS_IN_YEAR), function (m) {\n      return !_.includes(_this.getDisabledPositions(), m);\n    });\n  };\n\n  MonthPicker.prototype.getInitialDatePosition = function () {\n    var selectable = this.getSelectableCellPositions();\n\n    if (selectable.indexOf(this.state.date.month()) < 0) {\n      return selectable[0];\n    }\n\n    return this.state.date.month();\n  };\n\n  MonthPicker.prototype.getActiveCellPosition = function () {\n    /*\r\n      Return position of a month that should be displayed as active\r\n      (position in array returned by `this.buildCalendarValues`).\r\n    */\n    if (!_.isNil(this.props.value)) {\n      if (this.props.value.year() === this.state.date.year()) {\n        return this.props.value.month();\n      }\n    }\n  };\n\n  MonthPicker.prototype.getDisabledPositions = function () {\n    var _this = this;\n    /*\r\n      Return position numbers of months that should be displayed as disabled\r\n      (position in array returned by `this.buildCalendarValues`).\r\n    */\n\n\n    var disabled = [];\n\n    if (_.isArray(this.props.enable)) {\n      var enabledMonthPositions_1 = this.props.enable.filter(function (monthMoment) {\n        return monthMoment.isSame(_this.state.date, 'year');\n      }).map(function (monthMoment) {\n        return monthMoment.month();\n      });\n      disabled = disabled.concat(_.range(0, MONTHS_IN_YEAR).filter(function (monthPosition) {\n        return !_.includes(enabledMonthPositions_1, monthPosition);\n      }));\n    }\n\n    if (_.isArray(this.props.disable)) {\n      disabled = disabled.concat(this.props.disable.filter(function (monthMoment) {\n        return monthMoment.year() === _this.state.date.year();\n      }).map(function (monthMoment) {\n        return monthMoment.month();\n      }));\n    }\n\n    if (!_.isNil(this.props.maxDate)) {\n      if (this.props.maxDate.year() === this.state.date.year()) {\n        disabled = disabled.concat(_.range(this.props.maxDate.month() + 1, MONTHS_IN_YEAR));\n      }\n\n      if (this.props.maxDate.year() < this.state.date.year()) {\n        disabled = _.range(0, MONTHS_IN_YEAR);\n      }\n    }\n\n    if (!_.isNil(this.props.minDate)) {\n      if (this.props.minDate.year() === this.state.date.year()) {\n        disabled = disabled.concat(_.range(0, this.props.minDate.month()));\n      }\n\n      if (this.props.minDate.year() > this.state.date.year()) {\n        disabled = _.range(0, MONTHS_IN_YEAR);\n      }\n    }\n\n    if (disabled.length > 0) {\n      return _.uniq(disabled);\n    }\n  };\n\n  MonthPicker.prototype.isNextPageAvailable = function () {\n    var _this = this;\n\n    var _a = this.props,\n        maxDate = _a.maxDate,\n        enable = _a.enable;\n\n    if (_.isArray(enable)) {\n      return _.some(enable, function (enabledMonth) {\n        return enabledMonth.isAfter(_this.state.date, 'year');\n      });\n    }\n\n    if (_.isNil(maxDate)) {\n      return true;\n    }\n\n    if (this.state.date.year() >= maxDate.year()) {\n      return false;\n    }\n\n    return true;\n  };\n\n  MonthPicker.prototype.isPrevPageAvailable = function () {\n    var _this = this;\n\n    var _a = this.props,\n        minDate = _a.minDate,\n        enable = _a.enable;\n\n    if (_.isArray(enable)) {\n      return _.some(enable, function (enabledMonth) {\n        return enabledMonth.isBefore(_this.state.date, 'year');\n      });\n    }\n\n    if (_.isNil(minDate)) {\n      return true;\n    }\n\n    if (this.state.date.year() <= minDate.year()) {\n      return false;\n    }\n\n    return true;\n  };\n\n  return MonthPicker;\n}(BasePicker_1.SingleSelectionPicker);\n\nexports.default = MonthPicker;","map":null,"metadata":{},"sourceType":"script"}