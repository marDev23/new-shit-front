{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ = require(\"lodash\");\n\nvar React = require(\"react\");\n\nvar MinuteView_1 = require(\"../../views/MinuteView\");\n\nvar BasePicker_1 = require(\"../BasePicker\");\n\nvar sharedFunctions_1 = require(\"./sharedFunctions\");\n\nvar MINUTES_STEP = 5;\nvar MINUTES_ON_PAGE = 12;\nvar PAGE_WIDTH = 3;\n\nvar MinutePicker =\n/** @class */\nfunction (_super) {\n  __extends(MinutePicker, _super);\n\n  function MinutePicker(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.handleChange = function (e, _a) {\n      var value = _a.value;\n\n      var data = __assign({}, _this.props, {\n        value: {\n          year: _this.state.date.year(),\n          month: _this.state.date.month(),\n          date: _this.state.date.date(),\n          hour: _this.state.date.hour(),\n          minute: _this.buildCalendarValues().indexOf(value) * MINUTES_STEP\n        }\n      });\n\n      _this.props.onChange(e, data);\n    };\n\n    _this.switchToNextPage = function (e, data, callback) {\n      _this.setState(function (_a) {\n        var date = _a.date;\n        var nextDate = date.clone();\n        nextDate.add(1, 'day');\n        return {\n          date: nextDate\n        };\n      }, callback);\n    };\n\n    _this.switchToPrevPage = function (e, data, callback) {\n      _this.setState(function (_a) {\n        var date = _a.date;\n        var prevDate = date.clone();\n        prevDate.subtract(1, 'day');\n        return {\n          date: prevDate\n        };\n      }, callback);\n    };\n\n    _this.PAGE_WIDTH = PAGE_WIDTH;\n    return _this;\n  }\n\n  MinutePicker.prototype.render = function () {\n    var _a = this.props,\n        onChange = _a.onChange,\n        value = _a.value,\n        initializeWith = _a.initializeWith,\n        closePopup = _a.closePopup,\n        inline = _a.inline,\n        isPickerInFocus = _a.isPickerInFocus,\n        isTriggerInFocus = _a.isTriggerInFocus,\n        onCalendarViewMount = _a.onCalendarViewMount,\n        minDate = _a.minDate,\n        maxDate = _a.maxDate,\n        disable = _a.disable,\n        timeFormat = _a.timeFormat,\n        rest = __rest(_a, [\"onChange\", \"value\", \"initializeWith\", \"closePopup\", \"inline\", \"isPickerInFocus\", \"isTriggerInFocus\", \"onCalendarViewMount\", \"minDate\", \"maxDate\", \"disable\", \"timeFormat\"]);\n\n    return React.createElement(MinuteView_1.default, __assign({}, rest, {\n      values: this.buildCalendarValues(),\n      onNextPageBtnClick: this.switchToNextPage,\n      onPrevPageBtnClick: this.switchToPrevPage,\n      onValueClick: this.handleChange,\n      hoveredItemIndex: this.state.hoveredCellPosition,\n      onCellHover: this.onHoveredCellPositionChange,\n      onBlur: this.handleBlur,\n      inline: this.props.inline,\n      onMount: this.props.onCalendarViewMount,\n      hasNextPage: this.isNextPageAvailable(),\n      hasPrevPage: this.isPrevPageAvailable(),\n      disabledItemIndexes: this.getDisabledPositions(),\n      currentHeadingValue: this.getCurrentDate(),\n      activeItemIndex: this.getActiveCellPosition()\n    }));\n  };\n\n  MinutePicker.prototype.getCurrentDate = function () {\n    /* Return currently selected month, date and year(string) to display in calendar header. */\n    return sharedFunctions_1.getCurrentDate(this.state.date);\n  };\n\n  MinutePicker.prototype.buildCalendarValues = function () {\n    var _this = this;\n    /*\r\n      Return array of minutes (strings) like ['16:15', '16:20', ...]\r\n      that used to populate calendar's page.\r\n    */\n\n\n    var hour = this.state.date.hour() < 10 ? '0' + this.state.date.hour().toString() : this.state.date.hour().toString();\n    return _.range(0, 60, MINUTES_STEP).map(function (minute) {\n      return \"\" + (minute < 10 ? '0' : '') + minute;\n    }).map(function (minute) {\n      return sharedFunctions_1.buildTimeStringWithSuffix(hour, minute, _this.props.timeFormat);\n    });\n  };\n\n  MinutePicker.prototype.getSelectableCellPositions = function () {\n    var disabled = this.getDisabledPositions();\n\n    var all = _.range(0, MINUTES_ON_PAGE);\n\n    if (disabled) {\n      return all.filter(function (pos) {\n        return disabled.indexOf(pos) < 0;\n      });\n    }\n\n    return all;\n  };\n\n  MinutePicker.prototype.getInitialDatePosition = function () {\n    var selectable = this.getSelectableCellPositions();\n\n    if (selectable.indexOf(getMinuteCellPosition(this.state.date.minute())) < 0) {\n      return selectable[0];\n    }\n\n    return getMinuteCellPosition(this.state.date.minute());\n  };\n\n  MinutePicker.prototype.getDisabledPositions = function () {\n    var _this = this;\n\n    var _a = this.props,\n        disable = _a.disable,\n        minDate = _a.minDate,\n        maxDate = _a.maxDate;\n    var disabledByDisable = [];\n    var disabledByMaxDate = [];\n    var disabledByMinDate = [];\n\n    if (_.isArray(disable)) {\n      disabledByDisable = _.concat(disabledByDisable, disable.filter(function (date) {\n        return date.isSame(_this.state.date, 'day');\n      }).map(function (date) {\n        return getMinuteCellPosition(date.minute());\n      }));\n    }\n\n    if (minDate) {\n      if (minDate.isSame(this.state.date, 'day')) {\n        disabledByMinDate = _.concat(disabledByMinDate, _.range(0, minDate.minute()).map(function (m) {\n          return getMinuteCellPosition(m);\n        }));\n      }\n    }\n\n    if (maxDate) {\n      if (maxDate.isSame(this.state.date, 'day')) {\n        disabledByMaxDate = _.concat(disabledByMaxDate, _.range(maxDate.minute() + MINUTES_STEP, 60).map(function (m) {\n          return getMinuteCellPosition(m);\n        }));\n      }\n    }\n\n    var result = _.sortBy(_.uniq(_.concat(disabledByDisable, disabledByMaxDate, disabledByMinDate)));\n\n    if (result.length > 0) {\n      return result;\n    }\n  };\n\n  MinutePicker.prototype.getActiveCellPosition = function () {\n    /*\r\n      Return position of a minute that should be displayed as active\r\n      (position in array returned by `this.buildCalendarValues`).\r\n    */\n    var value = this.props.value;\n\n    if (value && value.isSame(this.state.date, 'date')) {\n      return Math.floor(this.props.value.minutes() / MINUTES_STEP);\n    }\n  };\n\n  MinutePicker.prototype.isNextPageAvailable = function () {\n    return sharedFunctions_1.isNextPageAvailable(this.state.date, this.props.maxDate);\n  };\n\n  MinutePicker.prototype.isPrevPageAvailable = function () {\n    return sharedFunctions_1.isPrevPageAvailable(this.state.date, this.props.minDate);\n  };\n\n  MinutePicker.defaultProps = {\n    timeFormat: '24'\n  };\n  return MinutePicker;\n}(BasePicker_1.SingleSelectionPicker);\n\nfunction getMinuteCellPosition(minute) {\n  return Math.floor(minute / MINUTES_STEP);\n}\n\nexports.default = MinutePicker;","map":null,"metadata":{},"sourceType":"script"}