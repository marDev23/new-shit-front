{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ = require(\"lodash\");\n/** Build days to fill page. */\n\n\nfunction buildDays(date, daysOnPage) {\n  var start = date.clone().startOf('month').startOf('week');\n  return getDaysArray(start.date(), getBrakepoints(date), daysOnPage).map(function (d) {\n    return d.toString();\n  });\n}\n\nexports.buildDays = buildDays;\n/** Return dates from ends of months.\r\n *\r\n * On one datepicker's page not only days from current month are displayed\r\n * but also some days from adjacent months. This function returns days\r\n * that separate one month from other (last day in month).\r\n * Return array of one or two numbers.\r\n */\n\nfunction getBrakepoints(referenceDate) {\n  var dateInCurrentMonth = referenceDate.clone();\n  var currentMonth = dateInCurrentMonth.month();\n  var brakepoints = [];\n  var firstDateOnPage = dateInCurrentMonth.clone().startOf('month').startOf('week');\n\n  if (firstDateOnPage.month() !== currentMonth) {\n    brakepoints.push(firstDateOnPage.clone().endOf('month').date());\n  }\n\n  brakepoints.push(dateInCurrentMonth.clone().endOf('month').date());\n  return brakepoints;\n}\n/* Return array of day positions that are not disabled by default. */\n\n\nfunction getDefaultEnabledDayPositions(allDays, date) {\n  var dateClone = date.clone();\n  var brakepoints = getBrakepoints(dateClone);\n\n  if (brakepoints.length === 1) {\n    return _.range(0, _.indexOf(allDays, brakepoints[0].toString()) + 1);\n  } else {\n    return _.range(_.indexOf(allDays, brakepoints[0].toString()) + 1, _.lastIndexOf(allDays, brakepoints[1].toString()) + 1);\n  }\n}\n\nexports.getDefaultEnabledDayPositions = getDefaultEnabledDayPositions;\n/** Return day positions that shoud be displayed as disabled. */\n\nfunction getDisabledDays(disable, maxDate, minDate, currentDate, daysOnPage, enable) {\n  var dayPositions = _.range(daysOnPage);\n\n  var daysInCurrentMonthPositions = getDefaultEnabledDayPositions(buildDays(currentDate, daysOnPage), currentDate);\n  var disabledDays = dayPositions.filter(function (dayPosition) {\n    return !_.includes(daysInCurrentMonthPositions, dayPosition);\n  });\n\n  if (_.isArray(enable)) {\n    var enabledDaysPositions_1 = enable.filter(function (date) {\n      return date.isSame(currentDate, 'month');\n    }).map(function (date) {\n      return date.date();\n    }).map(function (date) {\n      return daysInCurrentMonthPositions[date - 1];\n    });\n    disabledDays = _.concat(disabledDays, dayPositions.filter(function (position) {\n      return !_.includes(enabledDaysPositions_1, position);\n    }));\n  }\n\n  if (_.isArray(disable)) {\n    disabledDays = _.concat(disabledDays, disable.filter(function (date) {\n      return date.isSame(currentDate, 'month');\n    }).map(function (date) {\n      return date.date();\n    }).map(function (date) {\n      return daysInCurrentMonthPositions[date - 1];\n    }));\n  }\n\n  if (!_.isNil(maxDate)) {\n    if (maxDate.isBefore(currentDate, 'month')) {\n      disabledDays = dayPositions;\n    }\n\n    if (maxDate.isSame(currentDate, 'month')) {\n      disabledDays = _.concat(disabledDays, _.range(1, daysInCurrentMonthPositions.length + 1).filter(function (date) {\n        return date > maxDate.date();\n      }).map(function (date) {\n        return daysInCurrentMonthPositions[date - 1];\n      }));\n    }\n  }\n\n  if (!_.isNil(minDate)) {\n    if (minDate.isAfter(currentDate, 'month')) {\n      disabledDays = dayPositions;\n    }\n\n    if (minDate.isSame(currentDate, 'month')) {\n      disabledDays = _.concat(disabledDays, _.range(1, daysInCurrentMonthPositions.length + 1).filter(function (date) {\n        return date < minDate.date();\n      }).map(function (date) {\n        return daysInCurrentMonthPositions[date - 1];\n      }));\n    }\n  }\n\n  return _.sortBy(_.uniq(disabledDays).filter(function (day) {\n    return !_.isNil(day);\n  }));\n}\n\nexports.getDisabledDays = getDisabledDays;\n\nfunction isNextPageAvailable(date, maxDate) {\n  if (_.isNil(maxDate)) {\n    return true;\n  }\n\n  if (date.isSameOrAfter(maxDate, 'month')) {\n    return false;\n  }\n\n  return true;\n}\n\nexports.isNextPageAvailable = isNextPageAvailable;\n\nfunction isPrevPageAvailable(date, minDate) {\n  if (_.isNil(minDate)) {\n    return true;\n  }\n\n  if (date.isSameOrBefore(minDate, 'month')) {\n    return false;\n  }\n\n  return true;\n}\n\nexports.isPrevPageAvailable = isPrevPageAvailable; // helper\n\nfunction getDaysArray(start, brakepoints, length) {\n  var currentDay = start;\n  var days = [];\n  var brakepointsLeft = brakepoints.slice();\n\n  while (!(days.length === length)) {\n    days.push(currentDay);\n\n    var bp = _.first(brakepointsLeft);\n\n    if (currentDay === bp) {\n      currentDay = 1;\n      brakepointsLeft = _.slice(brakepointsLeft, 1);\n    } else {\n      currentDay = currentDay + 1;\n    }\n  }\n\n  return days;\n}\n\nexports.testExport = {\n  buildDays: buildDays,\n  getBrakepoints: getBrakepoints,\n  getDisabledDays: getDisabledDays,\n  isNextPageAvailable: isNextPageAvailable,\n  isPrevPageAvailable: isPrevPageAvailable,\n  getDaysArray: getDaysArray,\n  getDefaultEnabledDayPositions: getDefaultEnabledDayPositions\n};\n\nfunction getInitialDatePosition(initDate, values, selectablePositions) {\n  var selectable = selectablePositions.reduce(function (acc, pos) {\n    acc.push({\n      value: values[pos],\n      position: pos\n    });\n    return acc;\n  }, []);\n\n  var res = _.find(selectable, function (item) {\n    return item.value === initDate;\n  });\n\n  if (res) {\n    return res.position;\n  }\n\n  return selectable[0].position;\n}\n\nexports.getInitialDatePosition = getInitialDatePosition;","map":null,"metadata":{},"sourceType":"script"}