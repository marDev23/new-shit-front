{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ = require(\"lodash\");\n\nvar moment = require(\"moment\");\n\nvar PropTypes = require(\"prop-types\");\n\nvar React = require(\"react\");\n\nvar CustomPropTypes_1 = require(\"../lib/CustomPropTypes\");\n\nvar DayPicker_1 = require(\"../pickers/dayPicker/DayPicker\");\n\nvar MonthPicker_1 = require(\"../pickers/MonthPicker\");\n\nvar YearPicker_1 = require(\"../pickers/YearPicker\");\n\nvar InputView_1 = require(\"../views/InputView\");\n\nvar BaseInput_1 = require(\"./BaseInput\");\n\nvar lib_1 = require(\"../lib\");\n\nvar parse_1 = require(\"./parse\");\n\nvar shared_1 = require(\"./shared\");\n\nfunction getNextMode(currentMode) {\n  if (currentMode === 'year') {\n    return 'month';\n  }\n\n  if (currentMode === 'month') {\n    return 'day';\n  }\n\n  return 'year';\n}\n\nfunction getPrevMode(currentMode) {\n  if (currentMode === 'day') {\n    return 'month';\n  }\n\n  if (currentMode === 'month') {\n    return 'year';\n  }\n\n  return 'day';\n}\n\nvar DateInput =\n/** @class */\nfunction (_super) {\n  __extends(DateInput, _super);\n\n  function DateInput(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.getPicker = function (_a) {\n      var tabIndex = _a.tabIndex,\n          pickerWidth = _a.pickerWidth,\n          pickerStyle = _a.pickerStyle;\n      var _b = _this.props,\n          value = _b.value,\n          initialDate = _b.initialDate,\n          dateFormat = _b.dateFormat,\n          disable = _b.disable,\n          minDate = _b.minDate,\n          maxDate = _b.maxDate,\n          enable = _b.enable,\n          inline = _b.inline;\n      var pickerProps = {\n        isPickerInFocus: _this.isPickerInFocus,\n        isTriggerInFocus: _this.isTriggerInFocus,\n        inline: inline,\n        onCalendarViewMount: _this.onCalendarViewMount,\n        closePopup: _this.closePopup,\n        tabIndex: tabIndex,\n        pickerWidth: pickerWidth,\n        pickerStyle: pickerStyle,\n        onChange: _this.handleSelect,\n        onHeaderClick: _this.switchToPrevMode,\n        initializeWith: parse_1.getInitializer({\n          initialDate: initialDate,\n          dateFormat: dateFormat,\n          dateParams: _this.getDateParams()\n        }),\n        value: parse_1.parseValue(parse_1.chooseValue(value, initialDate), dateFormat),\n        enable: parse_1.parseArrayOrValue(enable, dateFormat),\n        minDate: parse_1.parseValue(minDate, dateFormat),\n        maxDate: parse_1.parseValue(maxDate, dateFormat)\n      };\n      var disableParsed = parse_1.parseArrayOrValue(disable, dateFormat);\n      var mode = _this.state.mode;\n\n      if (mode === 'year') {\n        return React.createElement(YearPicker_1.default, __assign({}, pickerProps, {\n          disable: shared_1.getDisabledYears(disableParsed)\n        }));\n      }\n\n      if (mode === 'month') {\n        return React.createElement(MonthPicker_1.default, __assign({}, pickerProps, {\n          hasHeader: true,\n          disable: shared_1.getDisabledMonths(disableParsed)\n        }));\n      }\n\n      return React.createElement(DayPicker_1.default, __assign({}, pickerProps, {\n        disable: disableParsed\n      }));\n    };\n\n    _this.switchToNextModeUndelayed = function () {\n      _this.setState(function (_a) {\n        var mode = _a.mode;\n        return {\n          mode: getNextMode(mode)\n        };\n      }, _this.onModeSwitch);\n    };\n\n    _this.switchToNextMode = function () {\n      lib_1.tick(_this.switchToNextModeUndelayed);\n    };\n\n    _this.switchToPrevModeUndelayed = function () {\n      _this.setState(function (_a) {\n        var mode = _a.mode;\n        return {\n          mode: getPrevMode(mode)\n        };\n      }, _this.onModeSwitch);\n    };\n\n    _this.switchToPrevMode = function () {\n      lib_1.tick(_this.switchToPrevModeUndelayed);\n    };\n\n    _this.onFocus = function () {\n      if (!_this.props.preserveViewMode) {\n        _this.setState({\n          mode: _this.props.startMode\n        });\n      }\n    };\n\n    _this.handleSelect = function (e, _a) {\n      var value = _a.value;\n\n      if (_this.state.mode === 'day' && _this.props.closable) {\n        _this.closePopup();\n      }\n\n      _this.setState(function (prevState) {\n        var mode = prevState.mode;\n\n        if (mode === 'day') {\n          var outValue = moment(value).format(_this.props.dateFormat);\n\n          _.invoke(_this.props, 'onChange', e, __assign({}, _this.props, {\n            value: outValue\n          }));\n        }\n\n        return {\n          year: value.year,\n          month: value.month,\n          date: value.date\n        };\n      }, function () {\n        return _this.state.mode !== 'day' && _this.switchToNextMode();\n      });\n    };\n\n    var parsedValue = parse_1.parseValue(props.value, props.dateFormat);\n    _this.state = {\n      mode: props.startMode,\n      popupIsClosed: true,\n      year: parsedValue ? parsedValue.year() : undefined,\n      month: parsedValue ? parsedValue.month() : undefined,\n      date: parsedValue ? parsedValue.date() : undefined\n    };\n    return _this;\n  }\n\n  DateInput.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        value = _a.value,\n        icon = _a.icon,\n        dateFormat = _a.dateFormat,\n        initialDate = _a.initialDate,\n        disable = _a.disable,\n        enable = _a.enable,\n        maxDate = _a.maxDate,\n        minDate = _a.minDate,\n        preserveViewMode = _a.preserveViewMode,\n        startMode = _a.startMode,\n        closable = _a.closable,\n        rest = __rest(_a, [\"value\", \"icon\", \"dateFormat\", \"initialDate\", \"disable\", \"enable\", \"maxDate\", \"minDate\", \"preserveViewMode\", \"startMode\", \"closable\"]);\n\n    return React.createElement(InputView_1.default, __assign({\n      closePopup: this.closePopup,\n      openPopup: this.openPopup,\n      popupIsClosed: this.state.popupIsClosed,\n      onMount: this.onInputViewMount,\n      icon: _.isBoolean(icon) && !icon ? undefined : icon,\n      onFocus: this.onFocus\n    }, rest, {\n      render: function render(props) {\n        return _this.getPicker(props);\n      },\n      value: parse_1.dateValueToString(parse_1.chooseValue(value, undefined), dateFormat)\n    }));\n  };\n\n  DateInput.prototype.getDateParams = function () {\n    /*\r\n      Return date params that are used for picker initialization.\r\n      Return undefined if none of [ 'year', 'month', 'date' ]\r\n      state fields defined.\r\n    */\n    var _a = this.state,\n        year = _a.year,\n        month = _a.month,\n        date = _a.date;\n\n    if (!_.isNil(year) || !_.isNil(month) || !_.isNil(date)) {\n      return {\n        year: year,\n        month: month,\n        date: date\n      };\n    }\n  };\n  /**\r\n   * Component responsibility:\r\n   *  - parse input value\r\n   *  - handle underlying picker change\r\n   */\n\n\n  DateInput.defaultProps = {\n    dateFormat: 'DD-MM-YYYY',\n    startMode: 'day',\n    preserveViewMode: true,\n    inline: false,\n    icon: 'calendar'\n  };\n  DateInput.propTypes = {\n    /** Currently selected value. */\n    value: PropTypes.string.isRequired,\n\n    /** Moment date formatting string. */\n    dateFormat: PropTypes.string,\n\n    /** Date to display initially when no date is selected. */\n    initialDate: PropTypes.oneOfType([PropTypes.string, CustomPropTypes_1.default.momentObj, PropTypes.instanceOf(Date)]),\n\n    /** Date or list of dates that are displayed as disabled. */\n    disable: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string), CustomPropTypes_1.default.momentObj, PropTypes.arrayOf(CustomPropTypes_1.default.momentObj), PropTypes.instanceOf(Date), PropTypes.arrayOf(PropTypes.instanceOf(Date))]),\n\n    /** Date or list of dates that are enabled (the rest are disabled). */\n    enable: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string), CustomPropTypes_1.default.momentObj, PropTypes.arrayOf(CustomPropTypes_1.default.momentObj), PropTypes.instanceOf(Date), PropTypes.arrayOf(PropTypes.instanceOf(Date))]),\n\n    /** Maximum date that can be selected. */\n    maxDate: PropTypes.oneOfType([PropTypes.string, CustomPropTypes_1.default.momentObj, PropTypes.instanceOf(Date)]),\n\n    /** Minimum date that can be selected. */\n    minDate: PropTypes.oneOfType([PropTypes.string, CustomPropTypes_1.default.momentObj, PropTypes.instanceOf(Date)]),\n\n    /** Preserve viewmode on focus? */\n    preserveViewMode: PropTypes.bool,\n\n    /** Display mode to start. */\n    startMode: PropTypes.oneOf(['year', 'month', 'day']),\n\n    /** If true, popup closes after selecting a date-time. */\n    closable: PropTypes.bool,\n\n    /**\r\n     * Called on clear.\r\n     *\r\n     * @param {SyntheticEvent} event - React's original SyntheticEvent.\r\n     * @param {object} data - All props and proposed value.\r\n     */\n    onClear: PropTypes.func,\n\n    /** Using the clearable setting will let users remove their selection from a calendar. */\n    clearable: PropTypes.bool,\n\n    /** Optional Icon to display inside the clearable Input. */\n    clearIcon: PropTypes.any,\n\n    /** Duration of the CSS transition animation in milliseconds. */\n    duration: PropTypes.number,\n\n    /** Named animation event to used. Must be defined in CSS. */\n    animation: PropTypes.string\n  };\n  return DateInput;\n}(BaseInput_1.default);\n\nexports.default = DateInput;","map":null,"metadata":{},"sourceType":"script"}