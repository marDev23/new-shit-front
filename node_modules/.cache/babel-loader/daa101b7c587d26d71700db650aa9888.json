{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ = require(\"lodash\");\n\nvar moment = require(\"moment\");\n\nvar PropTypes = require(\"prop-types\");\n\nvar React = require(\"react\");\n\nvar CustomPropTypes_1 = require(\"../lib/CustomPropTypes\");\n\nvar InputView_1 = require(\"../views/InputView\");\n\nvar parse_1 = require(\"./parse\");\n\nvar DatesRangePicker_1 = require(\"../pickers/dayPicker/DatesRangePicker\");\n\nvar BaseInput_1 = require(\"./BaseInput\");\n\nvar DATES_SEPARATOR = ' - ';\n\nfunction cleanDate(inputString, dateFormat) {\n  var formattedDateLength = moment().format(dateFormat).length;\n  return inputString.trim().slice(0, formattedDateLength);\n}\n/**\r\n * Extract start and end dates from input string.\r\n * Return { start: Moment|undefined, end: Moment|undefined }\r\n * @param {string} inputString Row input string from user\r\n * @param {string} dateFormat Moment formatting string\r\n */\n\n\nfunction parseDatesRange(inputString, dateFormat) {\n  // dates range is \"startDate - endDate\"\n  var dates = inputString.split(DATES_SEPARATOR).map(function (date) {\n    return cleanDate(date, dateFormat);\n  });\n  var result = {};\n  var start;\n  var end;\n  start = moment(dates[0], dateFormat);\n\n  if (dates.length === 2) {\n    end = moment(dates[1], dateFormat);\n  }\n\n  if (start && start.isValid()) {\n    result.start = start;\n  }\n\n  if (end && end.isValid()) {\n    result.end = end;\n  }\n\n  return result;\n}\n\nvar DatesRangeInput =\n/** @class */\nfunction (_super) {\n  __extends(DatesRangeInput, _super);\n\n  function DatesRangeInput(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.handleSelect = function (e, _a) {\n      var value = _a.value;\n      var dateFormat = _this.props.dateFormat;\n      var start = value.start,\n          end = value.end;\n      var outputString = '';\n\n      if (start && end) {\n        outputString = \"\" + start.format(dateFormat) + DATES_SEPARATOR + end.format(dateFormat);\n      } else if (start) {\n        outputString = \"\" + start.format(dateFormat) + DATES_SEPARATOR;\n      }\n\n      _.invoke(_this.props, 'onChange', e, __assign({}, _this.props, {\n        value: outputString\n      }));\n\n      if (_this.props.closable && start && end) {\n        _this.closePopup();\n      }\n    };\n\n    _this.state = {\n      popupIsClosed: true\n    };\n    return _this;\n  }\n\n  DatesRangeInput.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        value = _a.value,\n        icon = _a.icon,\n        dateFormat = _a.dateFormat,\n        initialDate = _a.initialDate,\n        maxDate = _a.maxDate,\n        minDate = _a.minDate,\n        closable = _a.closable,\n        rest = __rest(_a, [\"value\", \"icon\", \"dateFormat\", \"initialDate\", \"maxDate\", \"minDate\", \"closable\"]);\n\n    var _b = parseDatesRange(value, dateFormat),\n        start = _b.start,\n        end = _b.end;\n\n    return React.createElement(InputView_1.default, __assign({\n      popupIsClosed: this.state.popupIsClosed,\n      icon: _.isBoolean(icon) && !icon ? undefined : icon\n    }, rest, {\n      value: value,\n      onMount: this.onInputViewMount,\n      closePopup: this.closePopup,\n      openPopup: this.openPopup,\n      render: function render(pickerProps) {\n        return React.createElement(DatesRangePicker_1.default, __assign({}, pickerProps, {\n          isPickerInFocus: _this.isPickerInFocus,\n          isTriggerInFocus: _this.isTriggerInFocus,\n          inline: _this.props.inline,\n          onCalendarViewMount: _this.onCalendarViewMount,\n          closePopup: _this.closePopup,\n          onChange: _this.handleSelect,\n          dateFormat: dateFormat,\n          initializeWith: parse_1.getInitializer({\n            initialDate: initialDate,\n            dateFormat: dateFormat\n          }),\n          start: start,\n          end: end,\n          minDate: parse_1.parseValue(minDate, dateFormat),\n          maxDate: parse_1.parseValue(maxDate, dateFormat)\n        }));\n      }\n    }));\n  };\n  /**\r\n   * Component responsibility:\r\n   *  - parse input value (start: Moment, end: Moment)\r\n   *  - handle DayPicker change (format {start: Moment, end: Moment} into\r\n   *    string 'start - end')\r\n   */\n\n\n  DatesRangeInput.defaultProps = {\n    dateFormat: 'DD-MM-YYYY',\n    icon: 'calendar',\n    inline: false\n  };\n  DatesRangeInput.propTypes = {\n    /** Currently selected value. */\n    value: PropTypes.string,\n\n    /** Moment date formatting string. */\n    dateFormat: PropTypes.string,\n\n    /** Date to display initially when no date is selected. */\n    initialDate: PropTypes.oneOfType([PropTypes.string, CustomPropTypes_1.default.momentObj, PropTypes.instanceOf(Date)]),\n\n    /** Maximum date that can be selected. */\n    maxDate: PropTypes.oneOfType([PropTypes.string, CustomPropTypes_1.default.momentObj, PropTypes.instanceOf(Date)]),\n\n    /** Minimum date that can be selected. */\n    minDate: PropTypes.oneOfType([PropTypes.string, CustomPropTypes_1.default.momentObj, PropTypes.instanceOf(Date)]),\n\n    /** If true, popup closes after selecting a date-time. */\n    closable: PropTypes.bool,\n\n    /**\r\n     * Called on clear.\r\n     *\r\n     * @param {SyntheticEvent} event - React's original SyntheticEvent.\r\n     * @param {object} data - All props and proposed value.\r\n     */\n    onClear: PropTypes.func,\n\n    /** Using the clearable setting will let users remove their selection from a calendar. */\n    clearable: PropTypes.bool,\n\n    /** Optional Icon to display inside the clearable Input. */\n    clearIcon: PropTypes.any,\n\n    /** Duration of the CSS transition animation in milliseconds. */\n    duration: PropTypes.number,\n\n    /** Named animation event to used. Must be defined in CSS. */\n    animation: PropTypes.string\n  };\n  return DatesRangeInput;\n}(BaseInput_1.default);\n\nexports.default = DatesRangeInput;","map":null,"metadata":{},"sourceType":"script"}